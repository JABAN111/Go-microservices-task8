services:

  api:
    image: api:latest
    build:
      context: search-service
      dockerfile: Dockerfile.api
    container_name: api
    restart: unless-stopped
    ports:
      - 28080:8080
    volumes:
      - ./search-service/pkg/config/api/config.yaml:/config.yaml
    environment:
      - API_ADDRESS=:8080
      - WORDS_ADDRESS=words:8080
      - UPDATE_ADDRESS=update:8080
      - SEARCH_ADDRESS=search:8080
      - HTTP_SERVER_TIMEOUT=30s
    depends_on:
      - words
      - update
      - search

  search:
    image: search:latest
    build:
      context: search-service
      dockerfile: Dockerfile.search
    container_name: search
    restart: unless-stopped
    ports:
      - 28087:8080
    volumes:
      - ./search-service/pkg/config/search/config.yaml:/config.yaml
    environment:
     - WORDS_ADDRESS=words:8080
     - DB_ADDRESS=postgres://postgres:password@postgres:5432/postgres
     - CONCURRENCY=600
     - LOG_LEVEL=DEBUG
     - INDEX_TTL=20s
    depends_on:
      postgres:
        condition: service_healthy
      words:
        condition: service_started

  words:
    image: words:latest
    build:
      context: search-service
      dockerfile: Dockerfile.words
    container_name: words
    restart: unless-stopped
    ports:
      - "28081:8080"
    volumes:
      - ./search-service/pkg/config/words/config.yaml:/config.yaml
    environment:
      - WORDS_ADDRESS=:8080

  update:
    image: update:latest
    build:
      context: search-service
      dockerfile: Dockerfile.update
    container_name: update
    ports:
      - "28082:8080"
    volumes:
      - ./search-service/pkg/config/update/config.yaml:/config.yaml
    environment:
      - UPDATE_ADDRESS=:8080
      - DB_ADDRESS=postgres://postgres:password@postgres:5432/postgres
      - XKCD_URL=https://xkcd.com
      - XKCD_CONCURRENCY=100
      - WORDS_ADDRESS=words:8080
      - INDEX_TTL=20s
    depends_on:
      postgres:
        condition: service_healthy
      words:
        condition: service_started

  tests:
    image: tests:latest
    build: tests
    container_name: tests
    restart: "no"
    entrypoint: "true"

  postgres:
    image: postgres
    container_name: postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_PASSWORD: password
    volumes:
      - postgres:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin4
    restart: unless-stopped
    ports:
      - "18888:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@test.com
      PGADMIN_DEFAULT_PASSWORD: password
      PGADMIN_DISABLE_POSTFIX: "true"
    volumes:
      - pgadmin:/var/lib/pgadmin
    depends_on:
      - postgres

volumes:
  postgres:
  pgadmin:
